import { useQuery, useQueryClient } from "@tanstack/react-query";
import { useRoute } from "wouter";
import { getAuction } from "@/lib/api";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import useCountdown from "@/hooks/useCountdown";
import { 
  formatRelativeTime, 
  formatAddress, 
  formatPriceUSD, 
  getRarityColor, 
  getRarityLabel, 
  formatRarity,
  getBlockchainExplorerUrl
} from "@/lib/utils";
import { useState, useEffect, useCallback } from "react";
import BidModal from "@/components/modals/BidModal";
import PaymentMethodModal from "@/components/modals/PaymentMethodModal";
import BidActivity from "@/components/auctions/BidActivity";
import { Heart, Share2, ExternalLink, Trophy, TrendingUp, Award } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import useWallet from "@/hooks/useWallet";
import { useWebSocket } from "@/hooks/useWebSocket";
import { getNFTDetailedMetadata } from "@/lib/unleashApi";

export default function AuctionDetailsPage() {
  const [, params] = useRoute("/auctions/:id");
  const auctionId = params ? parseInt(params.id) : 0;
  const [showBidModal, setShowBidModal] = useState(false);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [localCurrentBid, setLocalCurrentBid] = useState<number>(0.04);
  const [localBidCount, setLocalBidCount] = useState<number>(3);
  const [localEndTime, setLocalEndTime] = useState<Date>(new Date(Date.now() + 60 * 1000));
  const [localLeader, setLocalLeader] = useState<string>("");
  const [detailedMetadata, setDetailedMetadata] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(false);
  
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const { address } = useWallet();
  const { subscribe } = useWebSocket();
  
  const { data: auction, isLoading, error } = useQuery({
    queryKey: [`/api/auctions/${auctionId}`],
    queryFn: () => getAuction(auctionId),
  });
  
  // Initialize local state from auction data when it loads
  useEffect(() => {
    if (auction) {
      // Calculate proper current bid based on bid count (each bid = $0.03)
      const bidCount = auction.bidCount || 0;
      const calculatedBid = parseFloat((bidCount * 0.03).toFixed(2));
      
      setLocalCurrentBid(calculatedBid);
      setLocalBidCount(bidCount);
      setLocalLeader(auction.bids?.[0]?.bidder?.walletAddress || auction.creator.walletAddress || "");
    }
  }, [auction]);
  
  // Function to navigate to NFT Collections page for API key management
  const navigateToApiSettings = () => {
    window.location.href = '/nft-collections';
  };

  // Fetch detailed metadata from UnleashNFTs API
  useEffect(() => {
    if (!auction || !auction.nft) return;
    
    const fetchDetailedMetadata = async () => {
      try {
        setLoading(true);
        
        // Get the contract address and token ID from the NFT
        const { contractAddress, tokenId, blockchain } = auction.nft;
        
        if (!contractAddress || !tokenId) {
          console.log('Missing contract address or token ID for detailed metadata');
          setLoading(false);
          return;
        }
        
        // Call the UnleashNFTs API to get the detailed metadata
        const metadata = await getNFTDetailedMetadata(
          contractAddress, 
          tokenId, 
          blockchain || 'ethereum'
        );
        
        if (metadata) {
          console.log('Detailed metadata loaded:', metadata);
          setDetailedMetadata(metadata);
        } else {
          console.log('No detailed metadata available from UnleashNFTs API');
        }
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.error('Error fetching detailed metadata:', error);
        
        // Handle specific API errors
        if (errorMessage.includes('401') || errorMessage.includes('Invalid API key')) {
          toast({
            title: "API Authentication Error",
            description: "Invalid API key for UnleashNFTs. Please update your API key in NFT Collections page settings.",
            variant: "destructive",
            action: (
              <Button variant="outline" onClick={navigateToApiSettings}>
                Update API Key
              </Button>
            )
          });
        } else if (errorMessage.includes('429') || errorMessage.includes('rate limit')) {
          toast({
            title: "API Rate Limit Exceeded",
            description: "Too many requests to UnleashNFTs API. Please try again later or upgrade your API plan.",
            variant: "destructive"
          });
        }
      } finally {
        setLoading(false);
      }
    };
    
    fetchDetailedMetadata();
  }, [auction, toast]);
  
  // Automatic bid simulation function
  const simulateRandomBid = useCallback(() => {
    // Generate a new random bidder
    const randomBidders = [
      "0x3aF15EA8b2e986E729E9Aa383EB18bc84A989c5D8",
      "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "0x2B96A7178F08F11d3aBc2b95E64CF2c4c55301E8",
      "0x1A90f32fDb08E7A17D25A4D27AaAaD67D3Dc3303",
      "0x9a8E43C44e37A52e219371c45Db11a057c6c7FFe",
      "0x6B175474E89094C44Da98b954EedeAC495271d0F"
    ];
    const randomBidder = randomBidders[Math.floor(Math.random() * randomBidders.length)];
    
    // Increment bid count
    setLocalBidCount(prev => prev + 1);
    
    // Calculate price based on bid count (always $0.03 per bid)
    const newBidCount = localBidCount + 1;
    setLocalCurrentBid(parseFloat((newBidCount * 0.03).toFixed(2)));
    
    // Update leader
    setLocalLeader(randomBidder);
    
    // Reset timer (Bidcoin reset mechanism to 1 minute)
    const resetTime = new Date();
    resetTime.setSeconds(resetTime.getSeconds() + 60);
    setLocalEndTime(resetTime);
  }, [localBidCount]);
  
  // Set up automatic bid simulation
  useEffect(() => {
    if (!auction) return;
    
    // Start automatic bid simulation on a random interval
    const simulationInterval = setInterval(() => {
      simulateRandomBid();
    }, Math.random() * 15000 + 10000); // Random interval between 10-25 seconds
    
    return () => {
      clearInterval(simulationInterval);
    };
  }, [auction, simulateRandomBid]);
  
  // Subscribe to WebSocket events for real-time updates
  useEffect(() => {
    // Subscribe to bid updates
    const unsubscribeBids = subscribe("new-bid", (data) => {
      if (data.auctionId === auctionId) {
        console.log("Real-time bid update received for this auction:", data);
        queryClient.invalidateQueries({ queryKey: [`/api/auctions/${auctionId}`] });
        
        // Update local state with new bid information
        setLocalBidCount(data.bidCount);
        setLocalCurrentBid(Number(data.currentBid));
        setLocalLeader(data.bidderAddress);
        
        // Reset timer (Bidcoin reset mechanism)
        const resetTime = new Date();
        resetTime.setSeconds(resetTime.getSeconds() + 60);
        setLocalEndTime(resetTime);
      }
    });
    
    return () => {
      unsubscribeBids();
    };
  }, [auctionId, queryClient, subscribe]);
  
  // Use local countdown instead of server time
  const { formattedTime, isComplete } = useCountdown({
    endTime: localEndTime,
    onComplete: () => {
      console.log("Auction complete!");
      
      // If user is highest bidder, show payment method selection
      if (isHighestBidder) {
        setShowPaymentModal(true);
        toast({
          title: "Congratulations! ðŸŽ‰",
          description: `You've won the auction for ${auction?.nft.name}. Please select your payment method.`,
        });
      }
    }
  });
  
  // Check if the current user is the highest bidder
  const isHighestBidder = address && localLeader === address;
  const isActive = !isComplete;
  
  // Parse the formatted time string into components
  const timeComponents = formattedTime ? formattedTime.split(':') : ['00', '00', '00'];
  const hours = parseInt(timeComponents[0]);
  const minutes = parseInt(timeComponents[1]);
  const seconds = parseInt(timeComponents[2]);
  const days = Math.floor(hours / 24);
  const hoursLeft = hours % 24;
  
  const bidIncrement = 0.03; // Fixed bid increment of $0.03 (3 pennies, converted to crypto equivalent)
  const minimumBid = localCurrentBid + bidIncrement;
  
  const handleOpenBidModal = () => {
    setShowBidModal(true);
  };
  
  const handleClosePaymentModal = () => {
    setShowPaymentModal(false);
  };
  
  const handleSelectPaymentMethod = (method: string) => {
    console.log(`Selected payment method: ${method} for auction ${auction?.id}`);
    setShowPaymentModal(false);
    
    // Get the total amount to pay based on current bid
    // Make sure localCurrentBid is a valid number before calling toFixed
    const paymentAmount = typeof localCurrentBid === 'number' ? localCurrentBid.toFixed(2) : '0.00';
    const nftName = auction?.nft.name || "NFT";
    
    toast({
      title: "Payment Method Selected",
      description: `You've chosen to pay with ${method}. An invoice for $${paymentAmount} in ${method} will be sent to your connected wallet.`,
    });
    
    // In a real implementation, this would initiate a crypto payment transaction
    setTimeout(() => {
      toast({
        title: "Payment Instructions Sent",
        description: `Check your email for instructions on how to complete your payment for ${nftName}.`,
        variant: "default",
      });
    }, 2000);
  };
  
  const handleCloseBidModal = () => {
    setShowBidModal(false);
  };
  
  const handlePlaceBid = async (amount: string) => {
    if (!address) {
      toast({
        title: "Wallet Not Connected",
        description: "Please connect your wallet before placing a bid.",
        variant: "destructive"
      });
      setShowBidModal(false);
      return;
    }
    
    try {
      console.log("Placing bid:", amount, "on auction:", auctionId, "with address:", address);
      
      // Increment bid count
      const newBidCount = localBidCount + 1;
      setLocalBidCount(newBidCount);
      
      // Calculate price based on bid count (always $0.03 per bid)
      const newPrice = parseFloat((newBidCount * 0.03).toFixed(2));
      setLocalCurrentBid(newPrice);
      
      // Set current user as leader
      setLocalLeader(address);
      
      // Reset timer (Bidcoin reset mechanism to 1 minute)
      const resetTime = new Date();
      resetTime.setSeconds(resetTime.getSeconds() + 60);
      setLocalEndTime(resetTime);
      
      toast({
        title: "Bid Placed Successfully!",
        description: `Your bid of $0.24 has been placed. New auction price: $${newPrice.toFixed(2)}`,
        variant: "default",
      });
      
      // Refresh the auction data using React Query
      queryClient.invalidateQueries({ queryKey: [`/api/auctions/${auctionId}`] });
      queryClient.invalidateQueries({ queryKey: ['/api/auctions'] });
      queryClient.invalidateQueries({ queryKey: ['/api/activity'] });
    } catch (error) {
      console.error("Error placing bid:", error);
      toast({
        title: "Bid Failed",
        description: error instanceof Error ? error.message : "Failed to place bid. Please try again.",
        variant: "destructive",
      });
    }
    
    setShowBidModal(false);
  };
  
  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 animate-pulse">
          <div className="h-[400px] bg-[#1f2937] rounded-xl"></div>
          <div className="space-y-4">
            <div className="h-10 bg-[#1f2937] rounded w-3/4"></div>
            <div className="h-6 bg-[#1f2937] rounded w-1/2"></div>
            <div className="h-20 bg-[#1f2937] rounded"></div>
            <div className="h-12 bg-[#1f2937] rounded"></div>
          </div>
        </div>
      </div>
    );
  }
  
  if (error || !auction) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-[#1f2937] rounded-xl p-8 text-center">
          <h2 className="text-xl font-medium text-white mb-2">Failed to load auction</h2>
          <p className="text-gray-400 mb-6">Please try again later or check if the auction exists</p>
          <Button className="bg-primary hover:bg-primary-dark text-white" onClick={() => window.history.back()}>
            Go Back
          </Button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
        <div>
          <div className="mb-6 relative">
            <img 
              src={auction.nft.imageUrl || '/placeholder-image.jpg'} 
              alt={auction.nft.name} 
              className="w-full h-auto rounded-xl object-cover aspect-square" 
            />
            <div className="absolute top-4 right-4 flex space-x-2">
              <Button variant="outline" size="sm" className="bg-black/30 backdrop-blur-sm border-white/20 text-white hover:bg-white/20 rounded-full w-9 h-9 p-0">
                <Heart className="h-5 w-5" />
              </Button>
              <Button variant="outline" size="sm" className="bg-black/30 backdrop-blur-sm border-white/20 text-white hover:bg-white/20 rounded-full w-9 h-9 p-0">
                <Share2 className="h-5 w-5" />
              </Button>
            </div>
          </div>
          
          <div className="bg-[#1f2937] p-5 rounded-xl border border-[#374151] mb-6">
            <h3 className="text-lg font-display font-bold text-white mb-4">NFT Properties</h3>
            {loading && (
              <div className="grid grid-cols-3 gap-3">
                {[1, 2, 3, 4, 5, 6].map((i) => (
                  <div key={i} className="bg-[#111827] rounded-lg p-3 text-center animate-pulse">
                    <div className="h-4 bg-[#1f2937] rounded mb-2"></div>
                    <div className="h-5 bg-[#1f2937] rounded mb-2"></div>
                    <div className="h-4 bg-[#1f2937] rounded w-1/2 mx-auto"></div>
                  </div>
                ))}
              </div>
            )}
            
            {/* Show enhanced metadata from UnleashNFTs when available */}
            {!loading && detailedMetadata && detailedMetadata.traits && detailedMetadata.traits.length > 0 ? (
              <div className="grid grid-cols-3 gap-3">
                {detailedMetadata.traits.map((attr: any, index: number) => (
                  <div key={index} className="bg-[#111827] rounded-lg p-3 text-center">
                    <p className="text-gray-400 text-xs mb-1">{attr.trait_type}</p>
                    <p className="text-white font-medium text-sm truncate">{attr.value}</p>
                    {attr.rarity !== undefined && (
                      <div className="mt-1 flex items-center justify-center">
                        <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium text-white ${getRarityColor(attr.rarity)}`}>
                          {getRarityLabel(attr.rarity)} ({formatRarity(attr.rarity)})
                        </span>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : 
            /* Fallback to original attributes if detailed metadata is not available */
            !loading && auction.nft.attributes && auction.nft.attributes.length > 0 ? (
              <div className="grid grid-cols-3 gap-3">

                {auction.nft.attributes.map((attr, index) => (
                  <div key={index} className="bg-[#111827] rounded-lg p-3 text-center">
                    <p className="text-gray-400 text-xs mb-1">{attr.trait_type}</p>
                    <p className="text-white font-medium text-sm truncate">{attr.value}</p>
                    {attr.rarity !== undefined && (
                      <div className="mt-1 flex items-center justify-center">
                        <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium text-white ${getRarityColor(typeof attr.rarity === 'string' ? parseFloat(attr.rarity) : attr.rarity)}`}>
                          {getRarityLabel(typeof attr.rarity === 'string' ? parseFloat(attr.rarity) : attr.rarity)} ({formatRarity(typeof attr.rarity === 'string' ? parseFloat(attr.rarity) : attr.rarity)})
                        </span>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              !loading && (
                <div className="bg-[#111827] rounded-lg p-4 text-center">
                  <p className="text-gray-400">No properties found for this NFT</p>
                </div>
              )
            )}
          </div>
          
          <div className="bg-[#1f2937] rounded-xl border border-[#374151]">
            <div className="p-5">
              <h3 className="text-lg font-display font-bold text-white mb-4">Details</h3>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-400">Token Standard</span>
                  <span className="text-white">{auction.nft.tokenStandard}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Blockchain</span>
                  <span className="text-white">{auction.nft.blockchain}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Token ID</span>
                  <span className="text-white">{auction.nft.tokenId}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Contract Address</span>
                  <span className="text-white truncate max-w-[180px]">{formatAddress(auction.nft.contractAddress)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Collection</span>
                  <span className="text-white">{auction.nft.collection || "Unknown Collection"}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">UnleashNFTs API</span>
                  <div className="flex items-center space-x-2">
                    <span className={`h-2 w-2 rounded-full ${detailedMetadata ? 'bg-green-500' : 'bg-red-500'}`}></span>
                    <span className="text-white">{detailedMetadata ? 'Connected' : 'Not connected'}</span>
                    {!detailedMetadata && (
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="ml-2 text-xs py-0 h-6" 
                        onClick={navigateToApiSettings}
                      >
                        Fix
                      </Button>
                    )}
                  </div>
                </div>
                {auction.nft.royalty && (
                  <div className="flex justify-between">
                    <span className="text-gray-400">Creator Royalty</span>
                    <span className="text-white">{auction.nft.royalty}%</span>
                  </div>
                )}
                {auction.nft.floorPrice && (
                  <div className="flex justify-between">
                    <span className="text-gray-400">Floor Price</span>
                    <span className="text-white">{auction.nft.floorPrice} ETH</span>
                  </div>
                )}
                {auction.nft.items && (
                  <div className="flex justify-between">
                    <span className="text-gray-400">Collection Size</span>
                    <span className="text-white">{auction.nft.items.toLocaleString()} items</span>
                  </div>
                )}
              </div>
            </div>
            <div className="border-t border-[#374151] p-5">
              <div className="flex justify-between items-center">
                <span className="text-gray-400">View on Explorer</span>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="text-primary hover:text-primary-light"
                  onClick={() => {
                    let explorerUrl;
                    if (auction.nft.blockchain === 'ethereum') {
                      explorerUrl = `https://etherscan.io/token/${auction.nft.contractAddress}?a=${auction.nft.tokenId}`;
                    } else if (auction.nft.blockchain === 'polygon') {
                      explorerUrl = `https://polygonscan.com/token/${auction.nft.contractAddress}?a=${auction.nft.tokenId}`;
                    } else if (auction.nft.blockchain === 'solana') {
                      explorerUrl = `https://solscan.io/token/${auction.nft.tokenId}`;
                    } else {
                      explorerUrl = `https://explorer.blockchain.com`;
                    }
                    window.open(explorerUrl, '_blank');
                  }}
                >
                  <ExternalLink className="h-4 w-4 mr-1" /> Explorer
                </Button>
              </div>
            </div>
          </div>
        </div>
        
        <div>
          <div className="bg-[#1f2937] rounded-xl border border-[#374151] p-6 mb-6">
            <div className="flex justify-between items-start mb-4">
              <div>
                <h1 className="text-2xl font-display font-bold text-white mb-1">{auction.nft.name}</h1>
                <p className="text-gray-400">{auction.nft.collection}</p>
              </div>
              
              <div className="bg-primary/20 text-primary text-xs px-2 py-1 rounded-full">
                {auction.nft.category}
              </div>
            </div>
            
            <div className="flex items-center space-x-3 mb-8">
              <div className="w-12 h-12 rounded-full overflow-hidden border-2 border-primary">
                <img src={auction.creator.avatar || '/placeholder-avatar.jpg'} alt={`${auction.creator.username} avatar`} className="w-full h-full object-cover" />
              </div>
              <div>
                <p className="text-xs text-gray-400">Created by</p>
                <p className="text-md font-medium text-white">{auction.creator.username}</p>
              </div>
            </div>
            
            <div className="mb-8">
              <p className="text-gray-400 mb-2">Current Bid</p>
              <div className="flex items-baseline">
                <span className="text-3xl font-display font-bold text-white mr-2">${typeof localCurrentBid === 'number' ? localCurrentBid.toFixed(2) : '0.00'}</span>
                <span className="text-gray-400">USD</span>
              </div>
            </div>
            
            <div className="mb-8">
              <p className="text-gray-400 mb-2">Auction Ends In</p>
              <div className="grid grid-cols-4 gap-2">
                <div className="bg-[#111827] p-3 rounded-lg text-center">
                  <span className="text-2xl font-display font-bold text-white">{days}</span>
                  <p className="text-xs text-gray-400 mt-1">Days</p>
                </div>
                <div className="bg-[#111827] p-3 rounded-lg text-center">
                  <span className="text-2xl font-display font-bold text-white">{hoursLeft}</span>
                  <p className="text-xs text-gray-400 mt-1">Hours</p>
                </div>
                <div className="bg-[#111827] p-3 rounded-lg text-center">
                  <span className="text-2xl font-display font-bold text-white">{minutes}</span>
                  <p className="text-xs text-gray-400 mt-1">Minutes</p>
                </div>
                <div className="bg-[#111827] p-3 rounded-lg text-center">
                  <span className="text-2xl font-display font-bold text-white">{seconds}</span>
                  <p className="text-xs text-gray-400 mt-1">Seconds</p>
                </div>
              </div>
            </div>
            
            <div className="mb-4">
              <div className="flex justify-between mb-2">
                <span className="text-gray-400">Total Bids</span>
                <span className="text-white">{localBidCount}</span>
              </div>
              <div className="h-2 bg-[#111827] rounded-full overflow-hidden">
                <div className="h-full bg-primary rounded-full" style={{ width: `${Math.min(100, (localBidCount / 100) * 100)}%` }}></div>
              </div>
            </div>
            
            <div className="mb-6">
              <div className="flex justify-between mb-2">
                <span className="text-gray-400">Highest Bidder</span>
                <span className="text-white">{formatAddress(localLeader)}</span>
              </div>
              <div className="h-2 bg-[#111827] rounded-full overflow-hidden">
                <div className="h-full bg-emerald-500 rounded-full" style={{ width: isHighestBidder ? "100%" : "0%" }}></div>
              </div>
            </div>
            
            <div className="flex gap-3">
              <Button 
                className="flex-1 text-white bg-primary hover:bg-primary/90 font-medium text-base" 
                onClick={handleOpenBidModal}
                disabled={!isActive}
              >
                {isActive ? (
                  <>Place Bid</>
                ) : (
                  <>Auction Ended</>
                )}
              </Button>
              
              {isActive && (
                <Button variant="outline" className="bg-transparent border-[#374151] text-white hover:bg-[#374151]">
                  Add to Watchlist
                </Button>
              )}
            </div>
          </div>
          
          <div className="bg-[#1f2937] rounded-xl border border-[#374151] p-6 mb-6">
            <Tabs defaultValue="about" className="w-full">
              <TabsList className="grid w-full grid-cols-3 bg-[#111827]">
                <TabsTrigger value="about">About</TabsTrigger>
                <TabsTrigger value="activity">Activity</TabsTrigger>
                <TabsTrigger value="history">Price History</TabsTrigger>
              </TabsList>
              <TabsContent value="about" className="mt-6">
                {/* NFT Description */}
                <div className="mb-6">
                  <h4 className="text-white font-semibold mb-3">NFT Description</h4>
                  <div className="text-gray-300 prose prose-invert max-w-none">
                    <p>{auction.nft.description || "No description available for this NFT."}</p>
                  </div>
                </div>
                
                {/* Collection Info */}
                {auction.nft.collection && (
                  <div className="pt-4 border-t border-[#374151]">
                    <h4 className="text-white font-semibold mb-3">Collection Information</h4>
                    <div className="flex flex-col gap-2">
                      <div className="flex items-center">
                        <div className="w-12 h-12 rounded-lg overflow-hidden mr-3">
                          {auction.nft.collectionImage ? (
                            <img 
                              src={auction.nft.collectionImage} 
                              alt={auction.nft.collection} 
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <div className="w-12 h-12 bg-gray-700 flex items-center justify-center text-gray-400">
                              <span className="text-2xl font-bold">{auction.nft.collection.charAt(0)}</span>
                            </div>
                          )}
                        </div>
                        <div>
                          <h5 className="text-white font-medium">{auction.nft.collection}</h5>
                          {auction.nft.items && (
                            <p className="text-sm text-gray-400">{auction.nft.items.toLocaleString()} items</p>
                          )}
                        </div>
                      </div>
                      
                      {auction.nft.floorPrice && (
                        <div className="flex items-center gap-4 mt-2">
                          <div className="bg-[#111827] p-2 rounded flex-1">
                            <p className="text-xs text-gray-400">Floor Price</p>
                            <p className="text-sm text-white font-medium">{auction.nft.floorPrice} ETH</p>
                          </div>
                          
                          {auction.nft.volume24h && (
                            <div className="bg-[#111827] p-2 rounded flex-1">
                              <p className="text-xs text-gray-400">24h Volume</p>
                              <p className="text-sm text-white font-medium">{auction.nft.volume24h} ETH</p>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </TabsContent>
              <TabsContent value="activity" className="mt-6">
                <BidActivity auctionId={auctionId} />
              </TabsContent>
              <TabsContent value="history" className="mt-6">
                <div className="text-center py-6">
                  <TrendingUp className="h-12 w-12 text-gray-500 mx-auto mb-3" />
                  <h3 className="text-lg font-medium text-white mb-2">Price History</h3>
                  <p className="text-gray-400">Price history will be available after more bids are placed.</p>
                </div>
              </TabsContent>
            </Tabs>
          </div>
          
          <div className="bg-[#1f2937] rounded-xl border border-[#374151] p-6">
            <div className="flex items-center mb-4">
              <Trophy className="h-5 w-5 text-primary mr-2" />
              <h3 className="text-lg font-display font-bold text-white">Bidcoin Auction Rules</h3>
            </div>
            <div className="space-y-4">
              <div className="flex">
                <div className="flex-shrink-0 h-8 w-8 rounded-full bg-primary/20 flex items-center justify-center mr-3">
                  <span className="text-primary font-medium">1</span>
                </div>
                <div>
                  <p className="text-white font-medium mb-1">Penny Auction Format</p>
                  <p className="text-gray-400 text-sm">Each bid costs only $0.24 and increases the auction price by $0.03.</p>
                </div>
              </div>
              
              <div className="flex">
                <div className="flex-shrink-0 h-8 w-8 rounded-full bg-primary/20 flex items-center justify-center mr-3">
                  <span className="text-primary font-medium">2</span>
                </div>
                <div>
                  <p className="text-white font-medium mb-1">Time Extension</p>
                  <p className="text-gray-400 text-sm">Each bid in the last minute resets the timer to 1 minute.</p>
                </div>
              </div>
              
              <div className="flex">
                <div className="flex-shrink-0 h-8 w-8 rounded-full bg-primary/20 flex items-center justify-center mr-3">
                  <span className="text-primary font-medium">3</span>
                </div>
                <div>
                  <p className="text-white font-medium mb-1">Winner Takes All</p>
                  <p className="text-gray-400 text-sm">The highest bidder when the timer reaches zero wins the NFT.</p>
                </div>
              </div>
              
              <div className="flex">
                <div className="flex-shrink-0 h-8 w-8 rounded-full bg-primary/20 flex items-center justify-center mr-3">
                  <span className="text-primary font-medium">4</span>
                </div>
                <div>
                  <p className="text-white font-medium mb-1">Transparent Bidding</p>
                  <p className="text-gray-400 text-sm">All bids are recorded on blockchain for full transparency and fairness.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {showBidModal && (
        <BidModal 
          isOpen={showBidModal} 
          onClose={handleCloseBidModal}
          onBid={handlePlaceBid}
          minimumBid={minimumBid}
          currentBid={localCurrentBid}
          bidIncrement={bidIncrement}
          auction={auction}
        />
      )}
      
      {showPaymentModal && (
        <PaymentMethodModal
          isOpen={showPaymentModal}
          onClose={handleClosePaymentModal}
          onSelectMethod={handleSelectPaymentMethod}
          auction={auction}
          finalPrice={typeof localCurrentBid === 'number' ? localCurrentBid.toFixed(2) : '0.00'}
        />
      )}
    </div>
  );
}